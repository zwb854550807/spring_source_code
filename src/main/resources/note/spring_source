Spring容器的refresh()方法[创建刷新]
1.prepareRefresh()刷新前的预处理
	1)initPropertySources()初始化一些属性设置;子类自定义个性化的属性设置方法
	2).getEnvironment().validateRequiredProperties() 校验属性的合法性等
	3).判断earlyApplicationListeners是否为null,是则新建一个LinkedHashSet,否则这行clear()方法,
	在applicationListeners.addAll(this.earlyApplicationListeners);
	4).earlyApplicationEvents = new LinkedHashSet();保存容器中的一些早起事件,如果有事件发生,
	则放入到该hashSet中,以后当事件派发器好了以后,直接用派发器将事件派发下去
2.obtainFreshBeanFactory() 获取beanFactory
	1).refreshBeanFactory 刷新创建beanFactory,创建了一个this.beanFactory = new
		DefaultListableBeanFactory(), 设置id
	2).getBeanFactory;返回刚才创建的BeanFactory对象
3.prepareBeanFactory(beanFactory); beanFactory的预准备工作(BeanFactory进行一些设置)
	1).设置BeanFactory的类加载器,支持表达式解析器...
	2).添加部分BeanPostProcessor[ApplicationContextAwareProcessor]
	3).设置忽略的自动装配的接口EnvironmentAware,EmbeddedValueResolverAware...
	4).注册可以解析的自动装配:我们可以直接在任何组件中自动注入:BeanFactory,ResourceLoader,ApplicationEventPublisher
	5).添加BeanPostProcessor[ApplicationListe nerDetector]
	6).给BeanFactory中注册一些可用的组件:
		environment[ConfigurableEnvironment]
		systemProperties[Map<String,Object>]
		systemEnvironment[Map<String,Object>]
4.postProcessBeanFactory(beanFactory); BeanFactory准备工作完成后,进行的后置处理工作;
	1).子类通过重写postProcessBeanFactory方法在BeanFactory创建并预准备完成以后做进一步的设置
=====================以上是BeanFactory的创建及预准备工作========================

5.invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessors
